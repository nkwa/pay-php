<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Pay\Models\Errors;

use Pay\Utils;
class HttpError
{
    /**
     * $details
     *
     * @var ?array<mixed> $details
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('details')]
    #[\Speakeasy\Serializer\Annotation\Type('array<mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $details = null;

    /**
     *
     * @var ?string $message
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('message')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $message = null;

    /**
     *
     * @var ?int $statusCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('statusCode')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $statusCode = null;

    /**
     * @param  ?array<mixed>  $details
     * @param  ?string  $message
     * @param  ?int  $statusCode
     * @phpstan-pure
     */
    public function __construct(?array $details = null, ?string $message = null, ?int $statusCode = null)
    {
        $this->details = $details;
        $this->message = $message;
        $this->statusCode = $statusCode;
    }

    public function toException(): HttpErrorThrowable
    {
        $serializer = Utils\JSON::createSerializer();
        $message = $serializer->serialize($this, 'json');
        if ($this->statusCode !== null) {
            $code = $this->statusCode;
        } else {
            $code = -1;
        }

        return new HttpErrorThrowable($message, (int) $code, $this);
    }
}